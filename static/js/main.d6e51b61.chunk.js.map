{"version":3,"sources":["utils/API.js","components/Search.js","components/Employee.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["specificEndPointURL","axios","get","Search","props","className","placeholder","name","type","onChange","event","startFilter","Employee","alt","firstName","src","icon","lastName","email","phone","Directory","state","employees","sortType","getEmployees","API","then","res","setState","data","results","catch","err","console","log","handleSortState","output","document","querySelector","value","sortedEmployees","sort","a","b","first","localeCompare","last","filterEmp","search","empFilter","filter","filtered","toLowerCase","includes","e","target","sortEmp","login","password","sortedEmp","render","style","height","backgroundImage","backgroundSize","backgroundPosition","label","id","map","employee","key","picture","thumbnail","this","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d6e51b61.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseURL = `https://randomuser.me/api/`;\r\nconst numberEmployees = 20;\r\nconst nationality = \"US\";\r\nconst specificEndPointURL = `${baseURL}?nat=${nationality}&results=${numberEmployees}`;\r\n\r\nexport default {\r\n    getEmployees() {\r\n        return axios.get(specificEndPointURL);\r\n    },\r\n};","import React from \"react\";\r\n\r\nconst Search = (props) => {\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center mx-auto\">\r\n            <form>\r\n                <input\r\n                    placeholder=\"Search for your coworker here\"\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    className=\"form-control-lg search-font mx-auto\"\r\n                    onChange={(event) => props.startFilter(event)}\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\n\r\n\r\nconst Employee = (props) => {\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td><img alt={props.firstName} src={props.icon} /></td>\r\n            <td>{props.firstName} {props.lastName}</td>\r\n            <td>{props.email}</td>\r\n            <td>{props.phone} </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Employee;","import React, { Component } from 'react';\r\nimport API from '../utils/API';\r\nimport Search from './Search.js';\r\nimport Employee from './Employee.js';\r\n\r\nclass Directory extends Component {\r\n\r\n    state = {\r\n        employees: [],\r\n        sortType: 'nosort',\r\n        name: '',\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getEmployees();\r\n    };\r\n\r\n    getEmployees = () => {\r\n        API.getEmployees()\r\n            .then((res) => {\r\n                this.setState({\r\n                    employees: res.data.results,\r\n                });\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n\r\n    handleSortState = () => {\r\n        const selectElement = document.querySelector(\"#sortSelection\");\r\n        const output = selectElement.value;\r\n        if (output === \"firstName\") {\r\n            this.setState({ sortType: \"firstNameame\" });\r\n            const sortedEmployees = this.state.employees;\r\n            sortedEmployees.sort((a, b) => a.name.first.localeCompare(b.name.first));\r\n            this.setState({ employees: sortedEmployees });\r\n        }\r\n        if (output === \"lastName\") {\r\n            this.setState({ sortType: \"lastName\" });\r\n            const sortedEmployees = this.state.employees;\r\n            sortedEmployees.sort((a, b) => a.name.last.localeCompare(b.name.last));\r\n            this.setState({ employees: sortedEmployees });\r\n        }\r\n    };\r\n\r\n    filterEmp = () => {\r\n        let { employees, search } = this.state;\r\n        let empFilter = employees.filter(filtered => {\r\n            return (\r\n                filtered.name.first.toLowerCase().includes(search.toLowerCase()) ||\r\n                filtered.name.last.toLowerCase().includes(search.toLowerCase())\r\n            )\r\n        })\r\n        this.setState({ empFilter })\r\n    };\r\n\r\n    startFilter = e => {\r\n        this.setState({ search: e.target.value }, () => {\r\n            this.filterEmp();\r\n            this.setState({ filtered: true });\r\n        });\r\n    };\r\n\r\n    sortEmp = ({ employees, sortType }) => {\r\n        console.log(employees);\r\n        if (sortType === 'asc') {\r\n            employees.sort((a, b) => (a.login.password > b.login.password) ? -1 : 1);\r\n            this.setState({ sortType: 'desc' });\r\n        } else if (sortType === 'desc') {\r\n            employees.sort((a, b) => (a.login.password > b.login.password) ? -1 : 1);\r\n            this.setState({ sortType: 'asc' });\r\n        }\r\n        this.setState({ sortedEmp: 'sortedEmp' });\r\n    };\r\n\r\n    render = () => {\r\n\r\n        const aboutStyle = {\r\n            height: '50vh',\r\n            backgroundImage: 'url(\"https://i.imgur.com/NXskfGq.jpg\")',\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"jumbotron jumbotron-fluid\" style={aboutStyle}>\r\n                    <div className=\"container text-center text-white\">\r\n                        <h1 className=\"display-4\">Employee Directory</h1>\r\n                        <p className=\"lead\">You can sort by ID and filter by name.</p>\r\n                    </div>\r\n                    <Search\r\n                        name=\"search\"\r\n                        startFilter={this.startFilter}\r\n                        label=\"Search\"\r\n                    />\r\n                    <div id=\"sortContainer\" className=\"d-flex justify-content-center mx-auto\">\r\n                        <select id=\"sortSelection\" onChange={this.handleSortState}>\r\n                            <option value=\"nosort\">No Sort</option>\r\n                            <option value=\"firstName\">Sort by First Name</option>\r\n                            <option value=\"lastName\">Sory by Last Name</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Photo</th>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Phone</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {!this.state.filtered ? this.state.employees.map(employee => (\r\n                            < Employee\r\n                                key={employee.id.value}\r\n                                firstName={employee.name.first}\r\n                                lastName={employee.name.last}\r\n                                phone={employee.phone}\r\n                                email={employee.email}\r\n                                icon={employee.picture.thumbnail}\r\n                            />\r\n\r\n                        ))\r\n                            // otherwise map the sorted employees\r\n                            : this.state.empFilter.map(employee => (\r\n\r\n                                <Employee\r\n                                    key={employee.id.value}\r\n                                    firstName={employee.name.first}\r\n                                    lastName={employee.name.last}\r\n                                    phone={employee.phone}\r\n                                    email={employee.email}\r\n                                    icon={employee.picture.thumbnail}\r\n                                    login={employee.login.password}\r\n                                />\r\n\r\n                            ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Directory;","import React from 'react';\nimport Directory from './components/Directory';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Directory />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}